package net.stencilproject.template;

/**
 * AUTOGENERATED: Do not edit!
 *
 * Handles comparisons between two arbitrary objects in an intelligent (but not too intelligent) manner.
 */
public final class CompareOps {
{% for op in compareOps %}
	public static final {{ op.type }} {{ op.op }}(TemplateContext ctx, Object o1, Object o2) {
		{% for type_idx in 0 to op.types|size-1 %}
		{% if op.types[type_idx] == "Null" %}
		if (o1 == null) {
		{% elif op.types[type_idx] != "Object" %}
		if (Types.is{{ op.types[type_idx] }}(ctx, o1)) {
		{% end %}
		{% var hasObjectFallback = false %}
		{% for type2_idx in 0 to op.types|size-1 %}
			{% var code = op.table[type_idx][type2_idx] %}
			{% if code != "X" %}
				{% if op.types[type2_idx] == "Object" %}
				{% hasObjectFallback = true %}
				{% elif op.types[type2_idx] == "Null" %}
				if (o2 == null){% else %}if (Types.is{{ op.types[type2_idx] }}(ctx, o2)){% end %}{{ code }}
			{% end %}
		{% end %}
		{% if not hasObjectFallback %}
		ctx.warn("Unsupported {{ op.op }} operands");
		return {{ op.invalid }};
		{% end %}
		{% if op.types[type_idx] != "Object" %}
		}
		{% end %}
		{% end %}
	}
{% end %}

	private static final int internalCompare(TemplateContext ctx, String s1, String s2) {
		return s1.compareTo(s2);
	}

	private static final int internalCompare(TemplateContext ctx, long l1, long l2) {
		return (l1 < l2) ? -1 : ((l1 == l2) ? 0 : 1);
	}

	private static final int internalCompare(TemplateContext ctx, double d1, double d2) {
		return Double.compare(d1, d2);
	}
	
	private static final int internalCompare(TemplateContext ctx, boolean b1, boolean b2) {
		return (b1 == b2) ? 0 : (b1 ? 1 : -1);
	}

	private static final int internalCompare(TemplateContext ctx, Comparable<?> value1, Comparable<?> value2) {
		Class<? extends Object> c1 = value1.getClass();
		Class<? extends Object> c2 = value2.getClass();

		if (c1 == c2 || c1.isInstance(value2)) {
			@SuppressWarnings("unchecked")
			Comparable<Object> v1 = (Comparable<Object>) value1;
			return v1.compareTo(value2);
		} else if (c2.isInstance(value1)) {
			@SuppressWarnings("unchecked")
			Comparable<Object> v2 = (Comparable<Object>) value2;
			return -v2.compareTo(value1);
		} else {
			ctx.warn("Incompatible and undefined comparison: " + c1 + " to " + c2);
			return 0;
		}
	}
}